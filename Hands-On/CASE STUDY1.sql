SELECT * FROM FACT
SELECT * FROM Location
SELECT * FROM Product

--1. DISPLAY THE NUMBER OF STATES PRESENT IN THE LOCATION TABLE.
SELECT COUNT(DISTINCT STATE) AS COUNT_OF_STATE FROM LOCATION

--2. HOW MANY PRODUCTS ARE OF REGULAR TYPE?
SELECT COUNT(PRODUCT) AS COUNT_0F_REGULAR_TYPE FROM PRODUCT WHERE TYPE='REGULAR'

--3. HOW MUCH SPENDING HAS BEEN DONE ON MARKETING OF PRODUCT ID 1? 
SELECT SUM(MARKETING) AS MARKETING_SPENT FROM FACT WHERE ProductId=1

--4. WHAT IS THE MINIMUM SALES OF A PRODUCT?
SELECT MIN(SALES) AS MIN_SALES FROM FACT

--5. DISPLAY THE MAX COST OF GOOD SOLD(COGS).
SELECT MAX(COGS) AS MAX_COGS FROM FACT

--6. DISPLAY THE DETIALS OF THE PRODUCTID WHERE PRODUCT TYPE IS COFFEE.
SELECT PRODUCTID,PRODUCT_TYPE FROM PRODUCT WHERE PRODUCT_TYPE='COFFEE'

--7. DISPLAY THE DETAILS WHERE TOTAL EXPANSES ARE GREATER THAN 40.
SELECT * FROM FACT WHERE TOTAL_EXPENSES>40

--8. WHAT IS THE AVERAGE SALES IN AREA CODE 719
SELECT AVG(SALES) AS AVG_SALES FROM FACT WHERE AREA_CODE=719

--9. FIND OUT THE TOTAL PROFIT GENERATED BY COLORADO STATE
SELECT SUM(PROFIT) AS TOTAL_PROFIT FROM FACT 
INNER JOIN LOCATION ON FACT.AREA_CODE=LOCATION.AREA_CODE
WHERE STATE='COLORADO'

--10. DISPLAY THE AVERAGE INVENTORY FOR EACH PRODUCT ID.
SELECT PRODUCTID, AVG(INVENTORY) AS AVG_INVENTORY FROM FACT
GROUP BY PRODUCTID 
ORDER BY PRODUCTID ASC

--11. DISPLAY STATE IN A SEQUENTIAL ORDER IN A LOCATION TABLE.
SELECT * FROM LOCATION ORDER BY STATE 

--12. DISPLAY THE AVERAGE BUDGET MARGIN WHERE THE AVERAGE BUDGET MARGIN SHOULD BE GREATER THAN 100.
SELECT PRODUCTID,AVG(BUDGET_MARGIN) AS AVG_BUDGET_MARGIN FROM FACT
GROUP BY PRODUCTID
HAVING AVG(BUDGET_MARGIN)>100
ORDER BY PRODUCTID

--13. WHAT IS THE TOTAL SALES DONE ON DATE 2010-01-01?
SELECT SUM(SALES) AS TOTAL_SALES FROM FACT WHERE DATE='2010-01-01'

--14. DISPLAY THE AVERAGE TOTAL EXPENSE OF EACH PRODUCT ID ON AN INDIVIDUAL DATE.
SELECT PRODUCTID,DATE ,AVG(TOTAL_EXPENSES) AS AVG_TOTAL_EXPENSES FROM FACT
GROUP BY PRODUCTID,DATE
ORDER BY PRODUCTID,DATE

--15. DISPLAY THE TABLE WITH THE FOLLOWING ATTRIBUTES SUCH AS
    --DATE,PRODUCTID,PRODUCT_TYPE,PRODUCT,SALES,PROFIT,STATE,AREA_CODE.
SELECT DATE,PRODUCT.PRODUCTID,PRODUCT_TYPE,PRODUCT,SALES,PROFIT,STATE,LOCATION.AREA_CODE FROM FACT
INNER JOIN PRODUCT ON FACT.PRODUCTID=PRODUCT.PRODUCTID
INNER JOIN LOCATION ON FACT.AREA_CODE=LOCATION.AREA_CODE

--16. DISPLAY THE RANK WITHOUT ANY GAP TO SHOW THE SALES WISE RANK.
SELECT *,DENSE_RANK() OVER (ORDER BY SALES DESC) AS SALES_RANKING FROM FACT

--17. FIND THE STATE WISE PROFIT AND SALES?
SELECT STATE, SUM(SALES)AS SALES ,SUM(PROFIT) AS PROFIT FROM FACT INNER JOIN LOCATION 
ON FACT.AREA_CODE=LOCATION.AREA_CODE 
GROUP BY STATE

--18. FIND THE STATE WISE PROFIT AND SALES ALONG WITH THE PRODUCT NAME?
SELECT STATE,SUM(PROFIT) PROFIT,SUM(SALES) AS SALES ,PRODUCT  FROM FACT F
INNER JOIN PRODUCT P ON F.PRODUCTID=P.PRODUCTID
INNER JOIN LOCATION L ON F.AREA_CODE=L.AREA_CODE
GROUP BY STATE,PRODUCT

--19. IF THERE IS AN INCREASE IN SALES OF 5%, CALCULATE THE INCREASED SALES.
SELECT SALES, (SALES+SALES*0.05) AS INCREASED_SALES FROM FACT

--20. FIND THE MAXIMUM PROFIT ALONG WITH THE PRODUCT ID AND PRODUCT TYPE?
SELECT F.PRODUCTID,PRODUCT_TYPE,MAX(PROFIT) AS MAX_PROFIT FROM FACT F 
INNER JOIN PRODUCT P ON F.PRODUCTID=P.PRODUCTID
GROUP BY F.PRODUCTID,PRODUCT_TYPE

--21. CREATE A STORED PROCEDURE TO FETCH THE RESULT ACCORDING TO THE PRODUCT TYPE FROM PRODUCT TABLE.
CREATE PROCEDURE PROC_01 (@PRODUCT_TYPE VARCHAR(30))
AS
BEGIN
SELECT * FROM PRODUCT WHERE PRODUCT_TYPE=@PRODUCT_TYPE
END
EXEC PROC_01 'COFFEE'

--22. WRITE A QUERY BY CREATING A CONDITION IN WHICH IF THE TOTAL EXPENSE IS LESS THAN 60 
    --THEN IT IS A PROFIT PR ELSE LOSS.
SELECT TOTAL_EXPENSES, (CASE WHEN TOTAL_EXPENSES<60 THEN 'PROFIT'
                             ELSE 'LOSS' END ) AS 'PROFIT/LOSS' FROM FACT

--23. GIVE THE TOTAL WEEKLY SALES VALUE WITH THE DATE AND PRODUCT ID DETAILS.
    --USE ROLL-UP TO PULL THE DATA IN HIERARCHICAL ORDER.
SELECT DATE,DATEPART(WEEK,DATE) AS WEEK_NO, SUM(SALES) AS TOTAL_SALES, PRODUCTID FROM FACT 
GROUP BY ROLLUP (DATE,PRODUCTID )

--24. APPLY UNION AND INTERSECTION OPERATOR ON THE TABLES WHICH CONSIST OF ATTRIBUTE AREA CODE.
SELECT AREA_CODE FROM FACT
UNION
SELECT AREA_CODE FROM LOCATION

SELECT AREA_CODE FROM FACT
INTERSECT
SELECT AREA_CODE FROM LOCATION

--25. CREATE A USER DEFINED FUNCTION FOR THE PRODUCT TABLE TO FETCH A PARTICULAR PRODUCT TYPE 
    --BASED UPON THE USER'S PREFERENCE.
CREATE FUNCTION FUN_PRDCT (@PRODUCT_TYPE VARCHAR(40))
RETURNS TABLE
AS
RETURN (SELECT * FROM PRODUCT WHERE PRODUCT_TYPE=@PRODUCT_TYPE)

SELECT * FROM DBO.FUN_PRDCT ('COFFEE')

--26. CHANGE THE PRODUCT TYPE FROM COFFEE TO TEA WHERE PRODUCT ID IS 1 AND UNDO IT.
BEGIN TRANSACTION
UPDATE PRODUCT SET PRODUCT_TYPE='TEA' WHERE PRODUCT_TYPE='COFFEE'
ROLLBACK

--27. DISPLAY THE DATE,PRODUCTID AND SALES WHERE TOTAL EXPENSES ARE BETWEEN 100 TO 200.
SELECT DATE,PRODUCTID,SALES FROM FACT WHERE TOTAL_EXPENSES BETWEEN 100 AND 200

--28. DELETE THE PRODUCTS IN THE PRODUCT TABLE FOR REGULAR TYPE.
BEGIN TRANSACTION
DELETE PRODUCT FROM PRODUCT WHERE TYPE='REGULAR'
SELECT * FROM PRODUCT
ROLLBACK

--29. DISPLAY THE ASCII VALUE OF THE FIFTH CHARACTER FROM THE COLUMN PRODUCT.
SELECT ASCII(SUBSTRING(PRODUCT,5,1)) AS ASCII_VALUE FROM PRODUCT 
